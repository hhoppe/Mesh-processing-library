CXX = clang++
CC = clang
AR = ar
RANLIB = ranlib

ifneq ($(is_mswin),)
  LDOUTPUT = -o $@.exe#  Otherwise we get names without extension (unlike with gcc).
endif

include $(dir $(lastword $(MAKEFILE_LIST)))/Makefile_base_either_gcc_or_clang

ifeq ($(plain_compiler),)
  # cxxall += -fno-fast-math $(gcc_safe_precise_math)#  For my test suite.
  # cxxall += -msse4.1
  # cxxall += -frtti#  optional "run-time type information", required for some examples in ./test/native
  cwarnings += -Weverything -Wno-unknown-warning-option -Wno-c++98-compat-pedantic -Wno-comma \
    -Wno-weak-vtables -Wno-padded -Wno-unsafe-buffer-usage \
    -Wno-global-constructors -Wno-exit-time-destructors \
    -Wno-covered-switch-default -Wno-switch-enum -Wno-unreachable-code -Wno-missing-noreturn \
    -Wno-unreachable-code-return -Wno-unreachable-code-break \
    -Wno-unused-macros -Wno-disabled-macro-expansion \
    -Wno-conversion -Wno-sign-conversion -Wno-float-equal -Wno-double-promotion
  # -Wno-source-uses-openmp -Wno-reserved-id-macro
  ifeq ($(is_mswin),1)
    cwarnings += -Wno-language-extension-token -Wno-nonportable-system-include-path -Wno-reserved-identifier
  endif
  # Even without $(PEDANTIC):
  ccommon += -Wno-overriding-option#  Was -Wno-overriding-t-option in earlier clang version.
  ccommon += -fno-finite-math-only#  Enable NAN support even with -ffast-math.
  ccommon += -Wno-constant-logical-operand
endif

# http://stackoverflow.com/questions/10990018/how-to-generate-assembly-code-with-clang-in-intel-syntax
# cxx_list_assembly_code = -S -mllvm --x86-asm-syntax=intel
# Unfortunately, clang cannot emit *.s assembler output while also creating the *.o object file,
#  so for now I do this manually by directly calling make on *.s using rule below.
cxx_list_assembly_code =

# Enable creation of assembly file if desired (as alternative to cxx_list_assembly_code):
%.s : %.cpp
# I see no way to interleave source code in assembly listing; -g -fverbose-asm do not help, -Wa,-achln is unrecognized.
	$(filter-out ,$(COMPILE.cpp)) -S -mllvm --x86-asm-syntax=intel $(@:$(extasm)=cpp)
#	rm -f v.$(@:$(extasm)=$(extobj))

%.h.pch : %.h
	@echo Making $(@) from $<
	@rm -f $(@)            # Because we actually "-include" itself to get the right path when building it.
	@$(COMPILE.cpp) -x c++-header -o $@ $<

ifeq ($(use_pch),1)
  # Force-include the precompiled header into every *.cpp file if the header is accessed with a relative path.
  ifeq ($(filter-out /%,$(MeshRoot)),)
    $(info Disabling precompiled header with non-relative MeshRoot=$(MeshRoot))
  else
    cxxall += -include $(MeshRoot)/libHh/precompiled_libHh.h
  endif
endif

## Precompiled headers:
# clang test.h -o test.h.pch
# clang -include test.h test.c -o test  # Unlike cl and gcc, clang does not allow header to be included from the cpp file; it must appear on this command line.

## Sanitize/analyze:
# clang -O1 -g -fsanitize=address -fno-omit-frame-pointer example_UseAfterFree.cc
# clang -fsanitize=memory -fno-omit-frame-pointer -g -O2 umr.cc
#
# See ~/git/hh_src/test/native/test_sanitize_address.cpp and ~/git/hh_src/test/native/Makefile
# At this time, MemorySanitizer supports Linux x86_64 only.
#
# Address sanitizer:
# Be warned though that it only works so far on Linux and Mac.  No luck for MinGW.

## Neon:
# Try Neon on imaginary ARM target, to test Vector4.h using ./test/Vector4_test.ou.
# cxxall := $(filter-out -m32 -march=native -mfpmath=sse -ffast-math,$(cxxall)) -target armv7a-pc-mingw32 -mfpu=neon -mfloat-abi=hard -D__NO_INLINE__=1 -D__MSVCRT__=1
# On WSL, could try:
# sudo apt install gcc-arm-none-eabi  # However, requires 2.5 GB disk space.
# clang++ --target=armv7a-none-eabi -mcpu=cortex-a8 -mfpu=vfp -mfloat-abi=hard -std=c++20 -c main.cpp -o main.o
